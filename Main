var cor = [
  [44.86557382828752,37.08659871132482],
  [46.08505625016252,37.08659871132482],
  [46.08505625016252,38.34669285754838],
  [44.86557382828752,38.34669285754838],
  [44.86557382828752,37.08659871132482]
  ]

var roi = ee.Geometry.Polygon(cor)

Map.centerObject(roi)

var modis2001 = ee.ImageCollection("MODIS/061/MOD09Q1")
.select('sur.*')
.filterDate('2001','2002')
.map(function(img){
  var band = img.multiply(0.0001);
  var ndwi = band.normalizedDifference(['sur_refl_b01','sur_refl_b02']).rename('ndwi');
  return ndwi
  }).median();
  
  
// Define visualization parameters with a red-to-blue color scale
var visParams = {
  min: -1,
  max: 1,
  palette: ['red', 'orange', 'yellow', 'green', 'cyan', 'blue']
};

// Add the NDWI 2001 layer with the custom color scale
Map.addLayer(modis2001.clip(roi), visParams, 'NDWI 2001', false);  
  

print(
  ui.Chart.image.histogram(modis2001,roi,250)
  )
  
var thr = modis2001.gt(0.1);

Map.addLayer(thr.clip(roi),[],'Lake Treshold 2001', false)

var mask2001 = thr.updateMask(thr);

// Visualization parameters for a single blue color
var maskVis = {
  min: 1,
  max: 1,
  palette: ['blue']
};

// Add the masked layer in blue
Map.addLayer(mask2001.clip(roi), maskVis, 'Lake 2001', false);

var vector2001 = mask2001.reduceToVectors({
  geometry: roi, scale: 250
  });
  

// Style for red boundary with transparent fill
var vectorStyle = vector2001.style({
  color: 'red',          // Boundary color
  fillColor: '00000000', // Fully transparent fill using 8-digit hex (last two are alpha)
  width: 1               // Optional: boundary line width
});

// Add the styled layer to the map
Map.addLayer(vectorStyle, {}, 'Lake Boundary 2001', false);




var dem = ee.ImageCollection("JAXA/ALOS/AW3D30/V3_2")
.mean().select('DSM')

Map.addLayer(dem.clip(vector2001),[],'Elevation 2001',false)


var lake_elevation_2001 = ee.Number(dem.reduceRegion({
  reducer: ee.Reducer.percentile([55]), geometry:vector2001, scale: 250
  }).values().get(0));
  
print('lake elevation for 2001', lake_elevation_2001)


Export.table.toDrive({
  collection: vector2001, description: 'lake2001', folder: 'lake_border', fileFormat: 'SHP'
  })
//////////////////////////////////////////////////////////////

var modis2023 = ee.ImageCollection("MODIS/061/MOD09Q1")
.select('sur.*')
.filterDate('2023','2024')
.map(function(img){
  var band = img.multiply(0.0001);
  var ndwi = band.normalizedDifference(['sur_refl_b01','sur_refl_b02']).rename('ndwi');
  return ndwi
  }).median();


Map.addLayer(modis2023.clip(roi), visParams, 'NDWI 2023', false);


var thr2 = modis2023.gt(0.1);
var mask2023 = thr2.updateMask(thr2);

// Add the masked layer in blue
Map.addLayer(mask2023.clip(roi), maskVis, 'Lake 2023', false);

var vector2023 = mask2023.reduceToVectors({
  geometry: roi, scale: 250
  });


// Style for red boundary with transparent fill
var vectorStyle = vector2023.style({
  color: 'black',          // Boundary color
  fillColor: '00000000', // Fully transparent fill using 8-digit hex (last two are alpha)
  width: 1               // Optional: boundary line width
});

// Add the styled layer to the map
Map.addLayer(vectorStyle, {}, 'Lake Boundary 2023', false);


Map.addLayer(dem.clip(vector2023),[],'dem 2023',false)



var lake_elevation_2023 = ee.Number(dem.reduceRegion({
  reducer: ee.Reducer.percentile([55]), geometry:vector2023, scale: 250
  }).values().get(0));
  
print('lake elevation for 2023', lake_elevation_2023)
